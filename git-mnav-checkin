#!/usr/bin/python
#
# This script will commit a task branch and merge it to the parent
#


#Define imports
import re, string, sys, getpass, os
from subprocess import call
from subprocess import Popen
from subprocess import check_output

#TODO Handle reverting changes if script fails

#Define functions
def usage():
    print "Usage:"
    print sys.argv[0] + "[project]"
    print ""
    print "Project: This will default to the parent of your branch, only give this argument if you are sure you want to add your code to a different project"
    quit(1)

def dprint( message ):
    #Comment out the following line for a "release build"
    print message
    return

#Start the program here
print "Starting " + sys.argv[0]

#Ensure arguments are correct and store them
if len(sys.argv) != 1:
    if len(sys.argv) != 2:
        usage()
    else
        print "Are you sure you want to merge your code to: " + project_branch

project_branch = sys.argv[1]
dprint ("project branch: " + project_branch)

# Get the current branch name
user = os.getlogin()
task_branch = branch_prefix + "_" + user
dprint ("Task branch name: " + task_branch)

# Parse the submodules ourselves (so that we can get meaningful error messages)
submodules = check_output ("git submodule | awk '{print $2}'", shell=True)
dprint("List of submodules:\n" + submodules)

##################################
# Get on the right parent branch #
##################################

# Update the superproject to the master branch
result_output = check_output ("git checkout master", stderr=subprocess.STDOUT, shell=True)
dprint("Result Output of git checkout master:\n" + result_output)

# Update submodules to the product branch if it exists, else update to the  master branch
#TODO: Do this more intelligently
print ""
git_checkout_master = "git submodule foreach git checkout master || :"
call(git_checkout_master, shell=True)

git_checkout_project = "git submodule foreach git checkout " + project_branch + " || :"
call(git_checkout_project, shell=True)
print ""


################################################
# Get on the right versions within the branch? #
################################################

print "Completed updating to baseline branches, creating task level branches" 

# Now create the task level branch "TT####_Username" and update to it
git_checkout_task = "git submodule foreach git checkout --track -b" + task_branch + " || :"
call(git_checkout_task, shell=True)

# Done with checkout
print "Checkout Complete"




